{"version":3,"sources":["webpack:///./src/app/modules/creational/abstract-factory/abstract-factory-routing.module.ts","webpack:///./src/app/modules/creational/abstract-factory/abstract-factory.module.ts","webpack:///./src/app/modules/creational/abstract-factory/components/abstract-factory.component.css","webpack:///./src/app/modules/creational/abstract-factory/components/abstract-factory.component.html","webpack:///./src/app/modules/creational/abstract-factory/components/abstract-factory.component.ts","webpack:///./src/app/modules/creational/abstract-factory/services/abstract-factory.service.ts","webpack:///./src/app/modules/creational/abstract-factory/services/abstract-factory/abstract-factory.ts"],"names":[],"mappings":"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","file":"modules-creational-abstract-factory-abstract-factory-module.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {AbstractFactoryComponent} from './components/abstract-factory.component';\n\nconst routes: Routes = [\n  {path: '', component: AbstractFactoryComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AbstractFactoryRoutingModule {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AbstractFactoryRoutingModule } from './abstract-factory-routing.module';\nimport {AbstractFactoryComponent} from './components/abstract-factory.component';\nimport {SharedModule} from '../../shared/shared.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AbstractFactoryRoutingModule,\n    SharedModule\n  ],\n  declarations: [\n    AbstractFactoryComponent,\n  ]\n})\nexport class AbstractFactoryModule { }\n","module.exports = \"\"","module.exports = \"<app-pattern [patternCompData]=\\\"patternCompData\\\"></app-pattern>\\n\"","import {Component} from '@angular/core';\nimport {AbstractFactoryService} from '../services/abstract-factory.service';\nimport {LINKS} from '../../../../LINKS';\nimport {ELEMENTS} from '../../../../elements';\nimport {GetGitContentService} from '../../../../core/services/http/get-git-content.service';\nimport {map} from 'rxjs/operators';\nimport {Observable} from 'rxjs';\nimport {PatternConfig} from '../../../shared/components/pattern/pattern.component';\nimport {InterpreterService} from '../../../behavioral/interpreter/services/interpreter.service';\n\n@Component({\n  selector: 'app-abstract-factory',\n  templateUrl: './abstract-factory.component.html',\n  styleUrls: ['./abstract-factory.component.css']\n})\nexport class AbstractFactoryComponent {\n  public patternCompData: PatternConfig = {\n    gitLink: LINKS.creational.abstractFactory.gitApiLink,\n    wikiLink: LINKS.creational.abstractFactory.wikiLink,\n    sampleLink: LINKS.creational.abstractFactory.sampleLink,\n    linkName: ELEMENTS.linkToSampleName,\n    sample: ELEMENTS.sampleTitle\n  };\n\n  constructor(public car: AbstractFactoryService, private http: GetGitContentService, private interpreter: InterpreterService) {\n    this.car.abstractFactory();\n    const content$: Observable<string> = this.http.getData(this.patternCompData.gitLink).pipe(\n      map((resp: any) => {\n        return resp ? this.interpreter.interpreter(atob(resp.content)) : null;\n      })\n    );\n    this.patternCompData = Object.assign(this.patternCompData, {content$});\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {abstractFactory} from './abstract-factory/abstract-factory';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AbstractFactoryService {\n\n  constructor() {\n  }\n\n  abstractFactory() {\n    abstractFactory();\n  }\n}\n\n","export function abstractFactory() {\r\n  const fiesta = makeCar({name: 'Fiesta', power: 70});\r\n  const focus = makeCar({name: 'Focus', power: 80});\r\n  const mustang = makeCar({name: 'mustang', power: 120});\r\n  // console.log('AbstractFactory:', fiesta);\r\n  // console.log('AbstractFactory:', focus);\r\n  // console.log('AbstractFactory:', mustang);\r\n}\r\n\r\nfunction makeCar(obj: Car): string {\r\n  const factory = new FiestaFocusCarFactory();\r\n  return factory.createCar(obj);\r\n}\r\n\r\nexport interface Car {\r\n  name: string;\r\n  power: number;\r\n}\r\n\r\ninterface CarFactory {\r\n  createCar(obj: Car): string;\r\n}\r\n\r\nclass FiestaFocusCarFactory implements CarFactory {\r\n  constructor() {\r\n  }\r\n\r\n  public createCar(obj: Car): string {\r\n    const {name, power} = obj;\r\n    const eng = new EngineFactory(power).enginePower();\r\n    const bw = new BodyworkFactory(name).bodyworkType();\r\n    return bw ? `New car ${name}. ${eng}. ${bw}.` : 'This type of a car can\\'t be produced on the factory!';\r\n  }\r\n}\r\n\r\ninterface Engine {\r\n  enginePower(): string;\r\n}\r\n\r\nclass EngineFactory implements Engine {\r\n  constructor(public power: number) {\r\n  }\r\n\r\n  enginePower(): string {\r\n    return `Power: ${this.power} kVt`;\r\n  }\r\n}\r\n\r\ninterface Bodywork {\r\n  bodyworkType(): string | false;\r\n}\r\n\r\nclass BodyworkFactory implements Bodywork {\r\n  private typeFiesta = 'Fiesta';\r\n  private typeFocus = 'Focus';\r\n\r\n  constructor(public name: string) {\r\n  }\r\n\r\n  bodyworkType(): string | false {\r\n    let car: string | false;\r\n    switch (this.name) {\r\n      case 'Fiesta':\r\n        car = `Bodywork type: ${this.typeFiesta}`;\r\n        break;\r\n      case 'Focus':\r\n        car = `Bodywork type: ${this.typeFocus}`;\r\n        break;\r\n      default:\r\n        car = false;\r\n        break;\r\n    }\r\n    return car;\r\n  }\r\n}\r\n"],"sourceRoot":""}